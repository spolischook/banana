# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Ig\IgSingleton:
        arguments:
            - '%env(INSTAG_USERNAME)%'
            - '%env(INSTAG_PASSWORD)%'

#    InstagramAPI\Instagram:
#        factory: 'App\Ig\IgFactory:login'

    jms_serializer.object_constructor:
        alias: jms_serializer.doctrine_object_constructor
        public: true

    JMS\Serializer\Serializer:
        alias: jms_serializer

    App\Serializer\EventSubscriber\ItemDeserializationSubscriber:
        tags:
            - { name: jms_serializer.event_subscriber }

    App\Serializer\EventSubscriber\UserDeserializationSubscriber:
        tags:
            - { name: jms_serializer.event_subscriber }

    OldSound\RabbitMqBundle\RabbitMq\Producer:
        alias: old_sound_rabbit_mq.task_producer

    App\EventListener\InterestingUserTaskListener:
        tags:
            - { name: doctrine.event_listener, event: onFlush }

    App\Consumer\TaskConsumer:
        arguments:
            - "@logger"
            - "@serializer"
            - !tagged app.queue_processor

    App\Consumer\Processor\TouchUserProcessor:
        tags:
            - { name: app.queue_processor }

    App\Consumer\Processor\DiscoverPeopleProcessor:
        tags:
            - { name: app.queue_processor }

    App\Consumer\Processor\UpdateMyFeedProcessor:
        tags:
            - { name: app.queue_processor }

    App\Consumer\Processor\UpdateMyItemProcessor:
        tags:
            - { name: app.queue_processor }
